name: Build and Publish NuGet

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write  # Needed for creating releases
  packages: write  # Needed for publishing packages

env:
  DOTNET_VERSION: '9.0.x'
  NUGET_PACKAGE_NAME: 'LemonNet'

jobs:
  build-linux:
    runs-on: ubuntu-22.04  # Use Ubuntu 22.04 for GLIBC 2.35 compatibility
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y g++ make
    
    - name: Check GLIBC version
      run: |
        echo "GLIBC version on build system:"
        ldd --version | head -n1
    
    - name: Build native library (Linux)
      run: |
        chmod +x build.sh
        ./build.sh Release
    
    - name: Check library dependencies
      run: |
        echo "Library dependencies:"
        ldd src/LemonNet/bin/Release/net9.0/lemon_wrapper.so || true
        echo ""
        echo "Required GLIBC versions:"
        objdump -T src/LemonNet/bin/Release/net9.0/lemon_wrapper.so | grep GLIBC | sed 's/.*GLIBC_/GLIBC_/' | sort -u || true
    
    - name: Upload Linux native library
      uses: actions/upload-artifact@v4
      with:
        name: linux-native
        path: src/LemonNet/bin/Release/net9.0/lemon_wrapper.so

  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2
    
    - name: Build native library (Windows)
      run: |
        msbuild src\LemonNet.Native\LemonWrapper.Native.vcxproj /p:Configuration=Release /p:Platform=x64
    
    - name: Copy Windows native library to output directory
      run: |
        New-Item -ItemType Directory -Force -Path "src\LemonNet\bin\Release\net9.0"
        Copy-Item "src\LemonNet.Native\bin\x64\Release\lemon_wrapper.dll" -Destination "src\LemonNet\bin\Release\net9.0\lemon_wrapper.dll"
    
    - name: Verify Windows native library was copied
      run: |
        if (!(Test-Path "src\LemonNet\bin\Release\net9.0\lemon_wrapper.dll")) {
          Write-Error "Native library not found at expected location"
          exit 1
        }
    
    - name: Upload Windows native library
      uses: actions/upload-artifact@v4
      with:
        name: windows-native
        path: src/LemonNet/bin/Release/net9.0/lemon_wrapper.dll

  test-and-publish:
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Download Linux native library
      uses: actions/download-artifact@v4
      with:
        name: linux-native
        path: src/LemonNet/bin/Release/net9.0/
    
    - name: Download Windows native library
      uses: actions/download-artifact@v4
      with:
        name: windows-native
        path: src/LemonNet/bin/Release/net9.0/
    
    - name: Also place Windows native library where the project expects it for packing
      run: |
        mkdir -p src/LemonNet.Native/bin/x64/Release
        cp src/LemonNet/bin/Release/net9.0/lemon_wrapper.dll src/LemonNet.Native/bin/x64/Release/
    
    - name: Set permissions for native library
      run: chmod +x src/LemonNet/bin/Release/net9.0/lemon_wrapper.so
    
    - name: Create packages directory for NuGet.config
      run: mkdir -p packages
    
    - name: Restore dependencies
      run: |
        dotnet restore src/LemonNet/LemonNet.csproj
        dotnet restore tests/LemonNet.Tests/LemonNet.Tests.csproj
    
    - name: Build
      run: |
        dotnet build src/LemonNet/LemonNet.csproj --configuration Release --no-restore
        dotnet build tests/LemonNet.Tests/LemonNet.Tests.csproj --configuration Release --no-restore
    
    - name: Test
      run: |
        dotnet test tests/LemonNet.Tests/LemonNet.Tests.csproj --configuration Release --no-build --verbosity normal
    
    - name: Calculate version
      id: version
      run: |
        # Use date-based versioning for automatic incrementing
        # Format: 0.1.YYMMDD.HHMM
        VERSION="0.1.$(date -u +'%y%m%d.%H%M')"
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Package version: $VERSION"
    
    - name: Pack NuGet package
      run: |
        dotnet pack src/LemonNet/LemonNet.csproj \
          --configuration Release \
          --no-build \
          -p:PackageVersion=${{ steps.version.outputs.VERSION }} \
          --output ./nupkg
    
    - name: Upload NuGet package artifact
      uses: actions/upload-artifact@v4
      with:
        name: nuget-package
        path: ./nupkg/*.nupkg
    
    - name: Publish to NuGet.org
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        dotnet nuget push ./nupkg/*.nupkg \
          --api-key ${{ secrets.NUGET_API_KEY }} \
          --source https://api.nuget.org/v3/index.json \
          --skip-duplicate
      continue-on-error: true # Don't fail the build if the package already exists
    
    - name: Create GitHub Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.VERSION }}
        name: Release v${{ steps.version.outputs.VERSION }}
        body: |
          ## LemonNet v${{ steps.version.outputs.VERSION }}
          
          Automated release from commit ${{ github.sha }}
          
          ### Installation
          ```bash
          dotnet add package LemonNet --version ${{ steps.version.outputs.VERSION }}
          ```
          
          ### Changes
          See [commit history](https://github.com/${{ github.repository }}/commits/main) for details.
        files: ./nupkg/*.nupkg
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}