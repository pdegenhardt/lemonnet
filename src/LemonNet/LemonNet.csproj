<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    <Nullable>enable</Nullable>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <PackageId>LemonNet</PackageId>
    <Version>0.1.0</Version>
    <Authors>Travel Engine</Authors>
    <Company>Travel Engine</Company>
    <Description>High-performance C# wrapper for the LEMON graph library, providing Edmonds-Karp and Preflow maximum flow algorithms with native C++ performance. Supports parallel arcs, type-safe API, and cross-platform operation (Windows/Linux x64).</Description>
    <PackageTags>graph;network-flow;max-flow;edmonds-karp;preflow;push-relabel;lemon;optimization;algorithms;graph-algorithms</PackageTags>
    <RepositoryUrl>https://github.com/pdegenhardt/lemonnet</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <PackageProjectUrl>https://github.com/pdegenhardt/lemonnet</PackageProjectUrl>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageReadmeFile>README.md</PackageReadmeFile>
    <PackageIcon>icon.png</PackageIcon>
    <IncludeBuildOutput>true</IncludeBuildOutput>
    <PlatformTarget>x64</PlatformTarget>
  </PropertyGroup>

  <ItemGroup>
    <None Remove="runtimes\win-x64\native\lemon_wrapper.dll" />
  </ItemGroup>

  <!-- Native files to include in NuGet package -->
  <ItemGroup>
    <Content Include="runtimes\win-x64\native\lemon_wrapper.dll" Pack="true" PackagePath="runtimes\win-x64\native\" Condition="Exists('runtimes\win-x64\native\lemon_wrapper.dll')" />
    <Content Include="runtimes\linux-x64\native\lemon_wrapper.so" Pack="true" PackagePath="runtimes\linux-x64\native\" Condition="Exists('runtimes\linux-x64\native\lemon_wrapper.so')" />
    <None Include="..\..\README.md" Pack="true" PackagePath="" />
    <None Include="..\..\icon.png" Pack="true" PackagePath="" />
  </ItemGroup>

  <!-- Automatically copy native DLL to output directory -->
  <ItemGroup Condition="'$(OS)' == 'Windows_NT'">
    <None Include="runtimes\win-x64\native\lemon_wrapper.dll" Condition="Exists('runtimes\win-x64\native\lemon_wrapper.dll')">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <Link>lemon_wrapper.dll</Link>
      <Visible>false</Visible>
    </None>
  </ItemGroup>

  <!-- Reference the native project to ensure build order (Windows only) -->
  <ItemGroup Condition="'$(OS)' == 'Windows_NT'">
    <ProjectReference Include="..\LemonNet.Native\LemonWrapper.Native.vcxproj">
      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
      <OutputItemType>Content</OutputItemType>
      <CopyToOutputDirectory>Never</CopyToOutputDirectory>
    </ProjectReference>
  </ItemGroup>
  
  <!-- Linux/Unix: Copy the .so file if it exists -->
  <ItemGroup Condition="'$(OS)' != 'Windows_NT'">
    <None Include="..\..\lemon_wrapper.so" Condition="Exists('..\..\lemon_wrapper.so')">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <Link>lemon_wrapper.so</Link>
      <Visible>false</Visible>
    </None>
  </ItemGroup>
  <ItemGroup>
    <Folder Include="runtimes\win-x64\native\" />
  </ItemGroup>

  <!-- Post-build event to copy native DLL from build output to runtimes directory -->
  <Target Name="CopyNativeDLL" AfterTargets="Build" Condition="'$(OS)' == 'Windows_NT'">
    <PropertyGroup>
      <NativeBuildOutput>$(ProjectDir)..\LemonNet.Native\bin\x64\$(Configuration)\lemon_wrapper.dll</NativeBuildOutput>
      <NativeTargetDir>$(ProjectDir)runtimes\win-x64\native\</NativeTargetDir>
    </PropertyGroup>
    <Message Text="Copying native DLL from $(NativeBuildOutput) to $(NativeTargetDir)" Importance="high" />
    <Copy SourceFiles="$(NativeBuildOutput)" DestinationFolder="$(NativeTargetDir)" Condition="Exists('$(NativeBuildOutput)')" />
  </Target>

</Project>